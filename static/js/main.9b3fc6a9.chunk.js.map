{"version":3,"sources":["Components/card/card.component.jsx","Components/card-list/card-list.component.jsx","Components/Searchbox/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","strawhat","img","name","post","CardList","strawhats","map","key","id","SearchBox","placeholder","changehandler","type","onChange","App","state","searchField","this","filteredStrawhats","filter","toLowerCase","includes","e","setState","target","value","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2TAWeA,G,kBARF,SAACC,GAAD,OACT,yBAAKC,UAAY,QACb,yBAAKC,IAAI,UAAUC,IAAKH,EAAMI,SAASC,MACvC,gCAAML,EAAMI,SAASE,KAArB,KACA,+BAAKN,EAAMI,SAASG,KAApB,QCOOC,EAVE,SAACR,GAAD,OACb,yBAAKC,UAAY,aAETD,EAAMS,UAAUC,KAAI,SAAAN,GAAQ,OACxB,kBAAC,EAAD,CAAMO,IAAOP,EAASQ,GAAIR,SAAYA,SCIvCS,G,MATG,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAcC,EAAhB,EAAgBA,cAAhB,OACd,2BAAOd,UAAY,SACfe,KAAK,SACLF,YAAaA,EACbG,SAAYF,MC6FLG,E,kDA7Fb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,YAAc,GACdX,UAAY,CACV,CACEG,GAAK,EACLN,KAAO,kBACPC,KAAO,UACPF,IAAM,wGAER,CACEO,GAAK,EACLN,KAAO,eACPC,KAAO,YACPF,IAAM,oGAER,CACEO,GAAK,EACLN,KAAO,iBACPC,KAAO,OACPF,IAAM,6FAER,CACEO,GAAK,EACLN,KAAO,QACPC,KAAO,SACPF,IAAM,8FAER,CACEO,GAAK,EACLN,KAAO,OACPC,KAAO,YACPF,IAAM,6FAER,CACEO,GAAK,EACLN,KAAO,oBACPC,KAAO,SACPF,IAAM,yGAER,CACEO,GAAK,EACLN,KAAO,aACPC,KAAO,gBACPF,IAAM,kGAER,CACEO,GAAK,EACLN,KAAO,SACPC,KAAO,aACPF,IAAM,+FAER,CACEO,GAAK,EACLN,KAAO,QACPC,KAAO,WACPF,IAAM,6FAER,CACEO,GAAK,GACLN,KAAO,SACPC,KAAO,WACPF,IAAM,kFAhEA,E,qDAsEL,IAAD,SAC6BgB,KAAKF,MAAhCV,EADF,EACEA,UAAWW,EADb,EACaA,YACbE,EAAoBb,EAAUc,QAAO,SAAAnB,GAAQ,OAC/CA,EAASE,KAAKkB,cAAcC,SAASL,EAAYI,kBAGrD,OACE,yBAAKvB,UAAU,OACb,gDACA,kBAAC,EAAD,CACEa,YAAc,SACdC,cAAkB,SAAAW,GAChB,EAAKC,SAAS,CAAEP,YAAcM,EAAEE,OAAOC,QAAS,WAC5C,OAAOC,QAAQC,IAAI,EAAKJ,gBAGhC,kBAAC,EAAD,CAAUlB,UAAaa,S,GAxFbU,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.9b3fc6a9.chunk.js","sourcesContent":["import React from 'react';\nimport './card.style.css';\n\nconst Card = (props) => (\n    <div className = 'card'>\n        <img alt='monster' src={props.strawhat.img}  />\n        <h2> {props.strawhat.name} </h2>\n        <p> {props.strawhat.post} </p>\n    </div>\n);\n\nexport default Card;","import React from 'react';\nimport './card-list.style.css';\nimport Card from '../card/card.component';\n\nconst CardList = (props) => (\n    <div className = 'card-list'>\n        {\n            props.strawhats.map(strawhat => (\n                <Card key = {strawhat.id} strawhat = {strawhat} />\n            ))\n        }\n    </div>\n);\n\nexport default CardList;","import React from 'react';\nimport './search-bos.style.css';\n\nconst SearchBox = ({placeholder , changehandler}) => (\n    <input className = 'search'\n        type='search' \n        placeholder={placeholder} \n        onChange = {changehandler}\n    />\n\n);\n\nexport default SearchBox;","import React from 'react';\nimport './App.css';\nimport CardList from './Components/card-list/card-list.component'\nimport SearchBox from './Components/Searchbox/search-box.component'\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      searchField : '',\n      strawhats : [\n        {\n          id : 1,\n          name : 'Monkey D. Luffy',\n          post : 'Captain',\n          img : 'https://vignette.wikia.nocookie.net/onepiece/images/5/58/Monkey_D._Luffy_Post_Timeskip_Portrait.png/'\n        },\n        {\n          id : 2,\n          name : 'Roronoa Zoro',\n          post : 'Swordsman',\n          img : 'https://vignette.wikia.nocookie.net/onepiece/images/b/bc/Roronoa_Zoro_Post_Timeskip_Portrait.png'\n        },\n        {\n          id : 3,\n          name : 'Vinsmoke Sanji',\n          post : 'Cook',\n          img : 'https://vignette.wikia.nocookie.net/onepiece/images/e/e5/Sanji_Post_Timeskip_Portrait.png'\n        },\n        {\n          id : 4,\n          name : 'Ussop',\n          post : 'Sniper',\n          img : 'https://vignette.wikia.nocookie.net/onepiece/images/3/37/Usopp_Post_Timeskip_Portrait.png/'\n        },\n        {\n          id : 5,\n          name : 'Nami',\n          post : 'Navigator',\n          img : 'https://vignette.wikia.nocookie.net/onepiece/images/2/2f/Nami_Post_Timeskip_Portrait.png/'\n        },\n        {\n          id : 6,\n          name : 'Tony Tony Chopper',\n          post : 'Doctor',\n          img : 'https://vignette.wikia.nocookie.net/onepiece/images/e/e2/Tony_Tony_Chopper_Post_Timeskip_Portrait.png'\n        },\n        {\n          id : 7,\n          name : 'Nico Robin',\n          post : 'Archaeologist',\n          img : 'https://vignette.wikia.nocookie.net/onepiece/images/9/90/Nico_Robin_Post_Timeskip_Portrait.png'\n        },\n        {\n          id : 8,\n          name : 'Franky',\n          post : 'Shipwright',\n          img : 'https://vignette.wikia.nocookie.net/onepiece/images/8/83/Franky_Post_Timeskip_Portrait.png/'\n        },\n        {\n          id : 9,\n          name : 'Brook',\n          post : 'Musician',\n          img : 'https://vignette.wikia.nocookie.net/onepiece/images/0/03/Brook_Post_Timeskip_Portrait.png'\n        },\n        {\n          id : 10,\n          name : 'Jimbei',\n          post : 'Helmsman',\n          img : 'https://vignette.wikia.nocookie.net/onepiece/images/f/f7/Jinbe_Portrait.png/'\n        }\n      ]\n    };\n  }\n\n  render(){\n    const { strawhats, searchField } = this.state;\n    const filteredStrawhats = strawhats.filter(strawhat =>\n        strawhat.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n    return (\n      <div className=\"App\">\n        <h1>StrawHat Pirates</h1>\n        <SearchBox \n          placeholder = 'Search'\n          changehandler = { e => {\n            this.setState({ searchField : e.target.value }, () => {\n                return console.log(this.setState)} )\n                }}\n        />\n        <CardList strawhats = {filteredStrawhats} />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}